
#include <cilk.h>
#include <cilkview.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <functional>



void merge(int *a, int begin, int middle, int end)
{
  int *tmp = new int[end-begin+1];
  int tempINC=0, FirstINC=0, SecondINC=0;
  while(tempINC <= end-begin && FirstINC <= middle-begin && SecondINC <= end-(middle+1))
  {
        if (a[begin+FirstINC] < a[middle+SecondINC+1])
                {
                        tmp[tempINC] = a[begin+FirstINC];
                        tempINC++;FirstINC++;
                }
        else
                {
                        tmp[tempINC] = a[middle+SecondINC+1];
                        tempINC++;SecondINC++;
                }
  }
  while(FirstINC <= middle-begin)
        {
                tmp[tempINC] = a[begin+FirstINC];
                tempINC++;FirstINC++;
        }
  while(SecondINC <= end-(middle+1))
        {
                tmp[tempINC] = a[middle+SecondINC+1];
                tempINC++;SecondINC++;
        }

int counter=0;
while(counter < end-begin+1)
        {
                a[begin+counter] = tmp[counter];
                counter++;
        }

if (end-begin+1>0)
  delete tmp;
}

void sample_mergesort(int *a, int begin,  int end)
{
  if (end-begin == 0)
        return;
  if (end-begin == 1)
        {
                if (a[end] > a[begin])
                        return;
                else
                {
                        int tmp = a[end];
                        a[end] = a[begin];
                        a[begin] = tmp;
                }
                return;
        }
  int middle = (end - begin)/2;
  cilk_spawn sample_mergesort(a, begin, begin+middle);
  sample_mergesort(a, begin+middle+1, end);
  cilk_sync;
  merge(a, begin, begin+middle, end);
}


// A simple test harness 
int mergemain(int n)
{
    int* a = new int[n];
    cilk::cilkview cv;

    for (int i = 0; i < n; ++i)
        a[i] = i;

    std::random_shuffle(a, a + n); 
    std::cout << "Sorting " << n << " integers" << std::endl;

    cv.start();
    sample_mergesort(a, 0, n-1);
    cv.stop();
    cv.dump("mergesort_plots");
    for (int i = 0; i < n; ++i) {
            std::cout << a[i] <<std::endl;
    }
    

    std::cout << cv.accumulated_milliseconds() / 1000.f << " seconds" << std::endl;

    // Confirm that a is sorted and that each element contains the index.
    for (int i = 0; i < n - 1; ++i) {
        if (a[i] >= a[i + 1] || a[i] != i) {
            std::cout << "Sort failed at location i=" << i << " a[i] = "
                      << a[i] << " a[i+1] = " << a[i + 1] << std::endl;
            delete[] a;
            return 1;
        }
    }
    std::cout << "Sort succeeded." << std::endl;
    delete[] a;
    return 0;
}

int cilk_main(int argc, char* argv[])
{
    int n = 10 * 1000 * 1000;
    if (argc > 1) {
         n = std::atoi(argv[1]);
         if (n <= 0) {
              std::cerr << "Invalid argument" << std::endl;
              std::cerr << "Usage: mergesort N" << std::endl;
              std::cerr << "       N = number of elements to sort" << std::endl;
              return 1;
         }
    }


    return mergemain(n);
}
